[
    {
        "question": "How many people closed the deal for 'GTX Plus Basic'?",
        "ground_truth": "30 people",
        "derivation": "len(sales_pipeline_df[sales_pipeline_df['product'] == 'GTX Plus Basic']['sales_agent'])",
        "difficulty": "easy",
        "subtype": "Direct Value Retrieval",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "30 people closed the deal for 'GTX Plus Basic'."
    },
    {
        "question": "Which account in the accounts table has the highest close value for deals in the sales_pipeline table?",
        "ground_truth": "Groovestreet, $30,288",
        "derivation": "merged_data = sales_pipeline_df.merge(accounts_df, left_on='account', right_on='account'); highest_close_value_account = merged_data.loc[merged_data['close_value'].idxmax(), ['account', 'close_value']]",
        "difficulty": "medium",
        "subtype": "Direct Value Retrieval",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The account with the highest close value for deals in the sales_pipeline table is Groovestreet."
    },
    {
        "question": "Who is the manager of the sales agent responsible for the highest revenue-generating opportunity in the sales_pipeline table?",
        "ground_truth": "agent: Rosalina Dieter, manager: Celia Rouche",
        "derivation": "highest_revenue_opportunity = sales_pipeline_df.loc[sales_pipeline_df['close_value'].idxmax()]; highest_revenue_agent = highest_revenue_opportunity['sales_agent'];agent_manager = sales_teams_df[sales_teams_df['sales_agent'] == highest_revenue_agent]['manager'].iloc[0]",
        "difficulty": "hard",
        "subtype": "Direct Value Retrieval",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "Celia Rouche"
    },
    {
        "question": "List all products from the products table with a sales price above $1000 that are part of a 'Won' deal in the sales_pipeline table.",
        "ground_truth": "MG Advanced, GTX Plus Pro, GTX Plus Basic, GTK 500",
        "derivation": "high_price_products = products_df[products_df['sales_price'] > 1000];won_deals = sales_pipeline_df[sales_pipeline_df['deal_stage'] == 'Won'];products_in_won_deals = won_deals['product'].unique()",
        "difficulty": "easy",
        "subtype": "Conditional Retrieval and Filtering",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "'MG Advanced', 'GTX Plus Pro', 'GTX Plus Basic', 'GTK 500'"
    },
    {
        "question": "Identify number of accounts in the accounts table that are subsidiaries and have at least one deal in the 'Won' stage in the sales_pipeline table.",
        "ground_truth": "15 accounts",
        "derivation": "subsidiary_accounts = accounts_df[accounts_df['subsidiary_of'].notna()];subsidiaries_with_won_deals = subsidiary_accounts[subsidiary_accounts['account'].isin(won_deals['account'].unique())]; len(subsidiaries_with_won_deals)",
        "difficulty": "medium",
        "subtype": "Conditional Retrieval and Filtering",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "15"
    },
    {
        "question": "List all regional offices with agents handling accounts in the 'technology' sector with 'Lost' deals.",
        "ground_truth": "0 office",
        "derivation": "technology_lost_accounts = accounts_df[accounts_df['sector'] == 'technology']['account']; lost_deals_agents = sales_pipeline_df[(sales_pipeline_df['deal_stage'] == 'Lost') & (sales_pipeline_df['account'].isin(technology_lost_accounts))]['sales_agent']; regional_offices = sales_teams_df[sales_teams_df['sales_agent'].isin(lost_deals_agents)]['regional_office'].unique()",
        "difficulty": "hard",
        "subtype": "Conditional Retrieval and Filtering",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "Agent stopped due to iteration limit or time limit."
    },
    {
        "question": "Calculate the total revenue generated by Won deals.",
        "ground_truth": "10,005,534",
        "derivation": "sales_pipeline_df[sales_pipeline_df['deal_stage'] == 'Won']['close_value'].sum()",
        "difficulty": "easy",
        "subtype": "Multi-Column Analysis and Summarization",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The total revenue generated by Won deals is 10,005,534.0."
    },
    {
        "question": "Summarize the total revenue generated per sector based on 'Won' deals.",
        "ground_truth": "employment: $436,174.00, entertainment: $689,007.00, finance: $950,908.00, marketing: $922,321.00, medical: $1,359,595.00, retail: $1,867,528.00, services: $533,006.00, software: $1,077,934.00, technolgy: $1,515,487.00, telecommunications: $653,574.00",
        "derivation": "won_deals = sales_pipeline_df[sales_pipeline_df['deal_stage'] == 'Won']; merged_data = won_deals.merge(accounts_df, on='account'); revenue_per_sector = merged_data.groupby('sector')['close_value'].sum().reset_index()",
        "difficulty": "medium",
        "subtype": "Multi-Column Analysis and Summarization",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The total revenue generated per sector based on 'Won' deals is as follows:\n- Medical: 5669\n- Technology: 1054"
    },
    {
        "question": "Compute the average deal value for each product series.",
        "ground_truth": "GTK: 16024.48, GTX: 1186.32, MG: 979.69",
        "derivation": "merged_df = sales_pipeline_df.merge(products_df, left_on='product', right_on='product', how='inner'); average_deal_value = merged_df.groupby('series')['close_value'].mean().reset_index()",
        "difficulty": "hard",
        "subtype": "Multi-Column Analysis and Summarization",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The average deal value for each product series is:\n- GTX: 552.5\n- MG: 50.0"
    },
    {
        "question": "Identify the product that appears most frequently in 'Won' deals.",
        "ground_truth": "GTX Basic",
        "derivation": "won_product = sales_pipeline_df[sales_pipeline_df['deal_stage'] == 'Won']['product'].mode().iloc[0]; most_frequent_product_details = products_df[products_df['product'] == won_product]",
        "difficulty": "easy",
        "subtype": "Pattern and Trend Recognition",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The product that appears most frequently in 'Won' deals is \"GTX Basic\"."
    },
    {
        "question": "Analyze the average time taken to close deals based on product type.",
        "ground_truth": "Product: GTK 500, Average Days to Close: 53.72, Product: GTX Basic, Average Days to Close: 49.91, Product: GTX Plus Basic, Average Days to Close: 49.41, Product: GTX Plus Pro, Average Days to Close: 46.08, Product: GTXPro, Average Days to Close: 45.73, Product: MG Advanced, Average Days to Close: 47.12, Product: MG Special, Average Days to Close: 48.43",
        "derivation": "sales_data['engage_date'] = pd.to_datetime(sales_data['engage_date']); sales_data['close_date'] = pd.to_datetime(sales_data['close_date']); sales_data['days_to_close'] = (sales_data['close_date'] - sales_data['engage_date']).dt.days; average_closing_time = sales_data.groupby('product')['days_to_close'].mean().reset_index()",
        "difficulty": "medium",
        "subtype": "Pattern and Trend Recognition",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The average time taken to close deals is 131.5 days for GTX Basic, 132.0 days for GTX Plus Basic, 137.0 days for GTXPro, and 133.0 days for MG Special."
    },
    {
        "question": "Analyze the product with the highest win percentage of each region.",
        "ground_truth": "Central: GTX Plus Pro (Win Rate: 49.13%), East: GTXPro (Win Rate: 56.24%), West: GTX Plus Pro (Win Rate: 50.16%)",
        "derivation": "merged_data = pd.merge(sales_pipeline, sales_teams, on='sales_agent', how='left'); merged_data['won'] = merged_data['deal_stage'].apply(lambda x: 1 if x == 'Won' else 0); win_rate_by_region_product = (merged_data.groupby(['regional_office', 'product']).agg(total_deals=('deal_stage', 'count'), won_deals=('won', 'sum')).reset_index()); win_rate_by_region_product['win_rate'] = win_rate_by_region_product['won_deals'] / win_rate_by_region_product['total_deals']; highest_win_rate_by_region = (win_rate_by_region_product.loc[win_rate_by_region_product.groupby('regional_office')['win_rate'].idxmax()])",
        "difficulty": "hard",
        "subtype": "Pattern and Trend Recognition",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "In the Central region, the products with the highest win percentage (100%) are \"GTX Basic\" and \"GTX Plus Basic.\""
    },
    {
        "question": "Group all accounts by sector and list the total deal value for each sector.",
        "ground_truth": "Employment: 436,174, Entertainment: 689,007, Finance: 950,908, Marketing: 922,321, Medical: 1,359,595",
        "derivation": "merged_deals_by_sector = sales_pipeline_df.merge(accounts_df, left_on='account', right_on='account', how='inner'); sector_deal_values = (merged_deals_by_sector.groupby('sector')['close_value'].sum().reset_index().rename(columns={'close_value': 'total_deal_value'}))",
        "difficulty": "easy",
        "subtype": "Data Aggregation, Grouping, and Classification",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The account names in `df2` and `df3` do not match, preventing a successful merge. Therefore, we cannot calculate the total deal value by sector with the current data."
    },
    {
        "question": "Group the data by regional office and calculate the average deal close value.",
        "ground_truth": "Central: 1,285.06, East: 1,663.40, West: 1,586.77",
        "derivation": "merged_offices_deals = sales_pipeline_df.merge(sales_teams_df, left_on='sales_agent', right_on='sales_agent', how='inner'); average_close_value_by_office = merged_offices_deals.groupby('regional_office')['close_value'].mean().reset_index()",
        "difficulty": "medium",
        "subtype": "Data Aggregation, Grouping, and Classification",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "Agent stopped due to iteration limit or time limit."
    },
    {
        "question": "Aggregate sales agents by manager and determine the total revenue they collectively generated from 'Won' deals",
        "ground_truth": "Cara Losch: 1,130,049, Celia Rouche: 1,603,897, Dustin Brinkmann: 1,094,363, Melvin Marxen: 2,251,930, Rocco Neubert: 1,960,545, Summer Sewald: 1,964,750",
        "derivation": "merged_sales_pipeline = sales_pipeline_df.merge(sales_teams_df, on='sales_agent', how='inner'); won_deals_by_manager = merged_sales_pipeline[merged_sales_pipeline['deal_stage'] == 'Won'].groupby('manager')['close_value'].sum().reset_index()",
        "difficulty": "hard",
        "subtype": "Data Aggregation, Grouping, and Classification",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The total revenue generated from 'Won' deals by sales agents under manager Dustin Brinkmann is 1642."
    },
    {
        "question": "Rank the top 3 products based on the total close value of their deals",
        "ground_truth": "1. GTX Plus Pro: 2,629,651 2. MG Advanced: 2,216,387 3. GTX Plus Basic: 705,275",
        "derivation": "merged_products_deals = sales_pipeline_df.merge(products_df, left_on='product', right_on='product', how='inner'); product_close_values = merged_products_deals.groupby('product')['close_value'].sum().reset_index(); top_3_products = product_close_values.sort_values(by='close_value', ascending=False).head(3)",
        "difficulty": "easy",
        "subtype": "Comparison and Ranking",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The top 3 products based on the total close value of their deals are:\n1. GTXPro with a total close value of 4514\n2. GTX Basic with a total close value of 1105\n3. GTX Plus Basic with a total close value of 1054"
    },
    {
        "question": "Compare the total revenue generated by each region and identify the most profitable region.",
        "ground_truth": "Central: 3,346,293, East: 3,090,594, West: 3,568,647",
        "derivation": "region_revenue = merged_offices_deals.groupby('regional_office')['close_value'].sum().reset_index(); most_profitable_region = region_revenue.loc[region_revenue['close_value'].idxmax()]",
        "difficulty": "medium",
        "subtype": "Comparison and Ranking",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The most profitable region is the \"Central\" region, with a total revenue of 1642."
    },
    {
        "question": "Rank top 5 accounts by the number of Won deals they are associated with.",
        "ground_truth": "Kan-code: 115, Hottechi: 111, Konex: 108, Condax: 105, Rangreen: 75.",
        "derivation": "won_deals_by_account = sales_pipeline_df[sales_pipeline_df['deal_stage'] == 'Won'].groupby('account')['opportunity_id'].count().reset_index(); won_deals_by_account.rename(columns={'opportunity_id': 'won_deals_count'}, inplace=True);ranked_accounts = won_deals_by_account.sort_values(by='won_deals_count', ascending=False)",
        "difficulty": "hard",
        "subtype": "Comparison and Ranking",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The top 5 accounts by the number of \"Won\" deals are:\n1. Cancity - 2 deals\n2. Isdom - 1 deal\n3. Codehow - 1 deal\n4. Hatfan - 1 deal"
    },
    {
        "question": "Give me a overview of the close rate of each sales person?",
        "ground_truth": "Kan-code: 115, Hottechi: 111, Konex: 108, Condax: 105, Rangreen: 75.",
        "derivation": "won_deals_by_account = sales_pipeline_df[sales_pipeline_df['deal_stage'] == 'Won'].groupby('account')['opportunity_id'].count().reset_index(); won_deals_by_account.rename(columns={'opportunity_id': 'won_deals_count'}, inplace=True);ranked_accounts = won_deals_by_account.sort_values(by='won_deals_count', ascending=False)",
        "difficulty": "easy",
        "subtype": "Summary and Reporting from Tables",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The close rate of each sales person is as follows (in percentage):\n\n- Anna Snelling: 46.43%\n- Boris Faz: 48.10%\n- Cassey Cress: 47.11%\n- Cecily Lampkin: 52.71%\n- Corliss Cosme: 48.39%\n- Daniell Hammack: 44.02%\n- Darcel Schlecht: 46.72%\n- Donn Cantrell: 57.45%\n- Elease Gluck: 45.20%\n- Garret Kinder: 60.98%\n- Gladys Colclough: 42.59%\n- Hayden Neloms: 52.97%\n- James Ascencio: 50.56%\n- Jonathan Berthelot: 49.57%\n- Kami Bicknell: 48.07%\n- Kary Hendrixson: 47.72%\n- Lajuana Vencill: 40.84%\n- Markita Hansen: 42.48%\n- Marty Freudenburg: 43.42%\n- Maureen Marcano: 52.28%\n- Moses Frase: 49.62%\n- Niesha Huffines: 43.93%\n- Reed Clapper: 65.40%\n- Rosalina Dieter: 45.00%\n- Rosie Papadopoulos: 48.75%\n- Versie Hillebrand: 48.75%\n- Vicki Laflamme: 49.00%\n- Violet Mclelland: 46.74%\n- Wilburn Farren: 50.00%\n- Zane Levy: 46.13%"
    },
    {
        "question": "Give me a split of percentage of deals in each stage",
        "ground_truth": "Won: 33.3%, Engaged: 40.2%, Lost: 26.5%",
        "derivation": "deal_stage_split_percentage = sales_pipeline_df['deal_stage'].value_counts(normalize=True) * 100",
        "difficulty": "medium",
        "subtype": "Summary and Reporting from Tables",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The percentage of deals in each stage is: Won (48.16%), Lost (28.10%), Engaging (18.06%), Prospecting (5.68%)."
    },
    {
        "question": "Which combination of product, region, and sales agent maximizes deal win rate",
        "ground_truth": "Won: 33.3%, Engaged: 40.2%, Lost: 26.5%",
        "derivation": "pipeline_full = pd.merge(pd.merge(sales_pipeline,products,on='product'),sales_teams,on='sales_agent); win_rate_data = pipeline_full.groupby(['product','regional_office','sales_agent']).agg(total_deals=('opportunity_id','count'),won_deals=('deal_stage',lambda x:(x=='Won').sum())).reset_index(); win_rate_data['win_rate'] = win_rate_data['won_deals'] / win_rate_data['total_deals']; win_rate_data.loc[win_rate_data['win_rate'].idxmax()]",
        "difficulty": "hard",
        "subtype": "Summary and Reporting from Tables",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The combination of \"GTX Basic\" product, \"Central\" region, and \"Moses Frase\" as the sales agent maximizes the deal win rate."
    }
]