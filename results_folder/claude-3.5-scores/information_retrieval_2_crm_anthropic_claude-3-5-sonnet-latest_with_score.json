[
    {
        "question": "How many people closed the deal for 'GTX Plus Basic'?",
        "ground_truth": "30 people",
        "derivation": "len(sales_pipeline_df[sales_pipeline_df['product'] == 'GTX Plus Basic']['sales_agent'])",
        "difficulty": "easy",
        "subtype": "Direct Value Retrieval",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "30 people closed deals for 'GTX Plus Basic'.",
        "score": 0
    },
    {
        "question": "Which account in the accounts table has the highest close value for deals in the sales_pipeline table?",
        "ground_truth": "Groovestreet, $30,288",
        "derivation": "merged_data = sales_pipeline_df.merge(accounts_df, left_on='account', right_on='account'); highest_close_value_account = merged_data.loc[merged_data['close_value'].idxmax(), ['account', 'close_value']]",
        "difficulty": "medium",
        "subtype": "Direct Value Retrieval",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "Kan-code is the account with the highest total close value for deals in the sales pipeline, with a total close value of 341,455.",
        "score": 0
    },
    {
        "question": "Who is the manager of the sales agent responsible for the highest revenue-generating opportunity in the sales_pipeline table?",
        "ground_truth": "agent: Rosalina Dieter, manager: Celia Rouche",
        "derivation": "highest_revenue_opportunity = sales_pipeline_df.loc[sales_pipeline_df['close_value'].idxmax()]; highest_revenue_agent = highest_revenue_opportunity['sales_agent'];agent_manager = sales_teams_df[sales_teams_df['sales_agent'] == highest_revenue_agent]['manager'].iloc[0]",
        "difficulty": "hard",
        "subtype": "Direct Value Retrieval",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "Celia Rouche",
        "score": 0
    },
    {
        "question": "List all products from the products table with a sales price above $1000 that are part of a 'Won' deal in the sales_pipeline table.",
        "ground_truth": "MG Advanced, GTX Plus Pro, GTX Plus Basic, GTK 500",
        "derivation": "high_price_products = products_df[products_df['sales_price'] > 1000];won_deals = sales_pipeline_df[sales_pipeline_df['deal_stage'] == 'Won'];products_in_won_deals = won_deals['product'].unique()",
        "difficulty": "easy",
        "subtype": "Conditional Retrieval and Filtering",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The products that meet both criteria are:\n1. MG Advanced (Sales price: $3,393)\n2. GTX Plus Pro (Sales price: $5,482)\n3. GTX Plus Basic (Sales price: $1,096)\n4. GTK 500 (Sales price: $26,768)\n\nThese products have sales prices above $1,000 and have successfully closed deals (won status) in the sales pipeline.",
        "score": 1
    },
    {
        "question": "Identify number of accounts in the accounts table that are subsidiaries and have at least one deal in the 'Won' stage in the sales_pipeline table.",
        "ground_truth": "15 accounts",
        "derivation": "subsidiary_accounts = accounts_df[accounts_df['subsidiary_of'].notna()];subsidiaries_with_won_deals = subsidiary_accounts[subsidiary_accounts['account'].isin(won_deals['account'].unique())]; len(subsidiaries_with_won_deals)",
        "difficulty": "medium",
        "subtype": "Conditional Retrieval and Filtering",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "15 accounts that are subsidiaries have at least one deal in the 'Won' stage. This was determined by:\n1. Finding accounts that are subsidiaries (where subsidiary_of is not null in the accounts table)\n2. Finding accounts that have won deals in the sales_pipeline table\n3. Finding the intersection of these two sets, which resulted in 15 unique subsidiary accounts that have won deals.",
        "score": 1
    },
    {
        "question": "List all regional offices with agents handling accounts in the 'technology' sector with 'Lost' deals.",
        "ground_truth": "0 office",
        "derivation": "technology_lost_accounts = accounts_df[accounts_df['sector'] == 'technology']['account']; lost_deals_agents = sales_pipeline_df[(sales_pipeline_df['deal_stage'] == 'Lost') & (sales_pipeline_df['account'].isin(technology_lost_accounts))]['sales_agent']; regional_offices = sales_teams_df[sales_teams_df['sales_agent'].isin(lost_deals_agents)]['regional_office'].unique()",
        "difficulty": "hard",
        "subtype": "Conditional Retrieval and Filtering",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The regional offices that had agents handling accounts in the technology sector with Lost deals are:\n1. Central\n2. East\n3. West\n\nThis analysis shows that sales agents from all three regional offices (Central, East, and West) have handled technology sector accounts that resulted in lost opportunities.",
        "score": 0
    },
    {
        "question": "Calculate the total revenue generated by Won deals.",
        "ground_truth": "10,005,534",
        "derivation": "sales_pipeline_df[sales_pipeline_df['deal_stage'] == 'Won']['close_value'].sum()",
        "difficulty": "easy",
        "subtype": "Multi-Column Analysis and Summarization",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The total revenue generated by Won deals is $10,005,534.",
        "score": 1
    },
    {
        "question": "Summarize the total revenue generated per sector based on 'Won' deals.",
        "ground_truth": "employment: $436,174.00, entertainment: $689,007.00, finance: $950,908.00, marketing: $922,321.00, medical: $1,359,595.00, retail: $1,867,528.00, services: $533,006.00, software: $1,077,934.00, technolgy: $1,515,487.00, telecommunications: $653,574.00",
        "derivation": "won_deals = sales_pipeline_df[sales_pipeline_df['deal_stage'] == 'Won']; merged_data = won_deals.merge(accounts_df, on='account'); revenue_per_sector = merged_data.groupby('sector')['close_value'].sum().reset_index()",
        "difficulty": "medium",
        "subtype": "Multi-Column Analysis and Summarization",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "Here's the total revenue generated per sector from won deals:\n1. Retail: $1,867,528 (highest)\n2. Technology: $1,515,487\n3. Medical: $1,359,595\n4. Software: $1,077,934\n5. Finance: $950,908\n6. Marketing: $922,321\n7. Entertainment: $689,007\n8. Telecommunications: $653,574\n9. Services: $533,006\n10. Employment: $436,174 (lowest)\n\nThe retail sector generated the highest revenue from won deals at approximately $1.87M, while the employment sector generated the lowest at $436K. There's a significant spread between the highest and lowest performing sectors, with retail generating more than 4 times the revenue of the employment sector. The technology, medical, and software sectors also performed strongly, each generating over $1M in revenue from won deals.",
        "score": 1
    },
    {
        "question": "Compute the average deal value for each product series.",
        "ground_truth": "GTK: 16024.48, GTX: 1186.32, MG: 979.69",
        "derivation": "merged_df = sales_pipeline_df.merge(products_df, left_on='product', right_on='product', how='inner'); average_deal_value = merged_df.groupby('series')['close_value'].mean().reset_index()",
        "difficulty": "hard",
        "subtype": "Multi-Column Analysis and Summarization",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "Here are the average deal values for each product series:\n- GTK series: $16,024.48\n- GTX series: $1,186.32\n- MG series: $979.69\n\nThe GTK series has significantly higher average deal values compared to the GTX and MG series, with GTX having slightly higher average deal values than MG series.",
        "score": 1
    },
    {
        "question": "Identify the product that appears most frequently in 'Won' deals.",
        "ground_truth": "GTX Basic",
        "derivation": "won_product = sales_pipeline_df[sales_pipeline_df['deal_stage'] == 'Won']['product'].mode().iloc[0]; most_frequent_product_details = products_df[products_df['product'] == won_product]",
        "difficulty": "easy",
        "subtype": "Pattern and Trend Recognition",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "{'type': 'error', 'error': {'details': None, 'type': 'overloaded_error', 'message': 'Overloaded'}}",
        "score": 0
    },
    {
        "question": "Analyze the average time taken to close deals based on product type.",
        "ground_truth": "Product: GTK 500, Average Days to Close: 53.72, Product: GTX Basic, Average Days to Close: 49.91, Product: GTX Plus Basic, Average Days to Close: 49.41, Product: GTX Plus Pro, Average Days to Close: 46.08, Product: GTXPro, Average Days to Close: 45.73, Product: MG Advanced, Average Days to Close: 47.12, Product: MG Special, Average Days to Close: 48.43",
        "derivation": "sales_data['engage_date'] = pd.to_datetime(sales_data['engage_date']); sales_data['close_date'] = pd.to_datetime(sales_data['close_date']); sales_data['days_to_close'] = (sales_data['close_date'] - sales_data['engage_date']).dt.days; average_closing_time = sales_data.groupby('product')['days_to_close'].mean().reset_index()",
        "difficulty": "medium",
        "subtype": "Pattern and Trend Recognition",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "Here's the average time (in days) taken to close deals for each product:\n1. GTK 500: 53.7 days (longest closing cycle)\n2. GTX Basic: 49.9 days\n3. GTX Plus Basic: 49.4 days\n4. MG Special: 48.4 days\n5. MG Advanced: 47.1 days\n6. GTX Plus Pro: 46.1 days\n7. GTXPro: 45.7 days (shortest closing cycle)\n\nKey observations:\n- The range of closing times is relatively tight, spanning from about 46 to 54 days\n- GTK 500 has the longest sales cycle at nearly 54 days\n- GTXPro has the most efficient sales cycle at about 46 days\n- Most products fall within the 46-50 day range for closing deals\n- The difference between the fastest and slowest closing times is approximately 8 days\n\nThis suggests a fairly consistent sales process across products, with some minor variations in closing time depending on the product complexity or type.",
        "score": 0
    },
    {
        "question": "Analyze the product with the highest win percentage of each region.",
        "ground_truth": "Central: GTX Plus Pro (Win Rate: 49.13%), East: GTXPro (Win Rate: 56.24%), West: GTX Plus Pro (Win Rate: 50.16%)",
        "derivation": "merged_data = pd.merge(sales_pipeline, sales_teams, on='sales_agent', how='left'); merged_data['won'] = merged_data['deal_stage'].apply(lambda x: 1 if x == 'Won' else 0); win_rate_by_region_product = (merged_data.groupby(['regional_office', 'product']).agg(total_deals=('deal_stage', 'count'), won_deals=('won', 'sum')).reset_index()); win_rate_by_region_product['win_rate'] = win_rate_by_region_product['won_deals'] / win_rate_by_region_product['total_deals']; highest_win_rate_by_region = (win_rate_by_region_product.loc[win_rate_by_region_product.groupby('regional_office')['win_rate'].idxmax()])",
        "difficulty": "hard",
        "subtype": "Pattern and Trend Recognition",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "{'type': 'error', 'error': {'details': None, 'type': 'overloaded_error', 'message': 'Overloaded'}}",
        "score": 0
    },
    {
        "question": "Group all accounts by sector and list the total deal value for each sector.",
        "ground_truth": "Employment: 436,174, Entertainment: 689,007, Finance: 950,908, Marketing: 922,321, Medical: 1,359,595",
        "derivation": "merged_deals_by_sector = sales_pipeline_df.merge(accounts_df, left_on='account', right_on='account', how='inner'); sector_deal_values = (merged_deals_by_sector.groupby('sector')['close_value'].sum().reset_index().rename(columns={'close_value': 'total_deal_value'}))",
        "difficulty": "easy",
        "subtype": "Data Aggregation, Grouping, and Classification",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "Here are the total deal values by sector:\n- Retail: $1,867,528\n- Technology: $1,515,487\n- Medical: $1,359,595\n- Software: $1,077,934\n- Finance: $950,908\n- Marketing: $922,321\n- Entertainment: $689,007\n- Telecommunications: $653,574\n- Services: $533,006\n- Employment: $436,174\n\nThe retail sector has generated the highest total deal value at nearly $1.87 million, followed by technology at $1.52 million and medical at $1.36 million. The employment sector has generated the lowest total deal value at $436,174.",
        "score": 0
    },
    {
        "question": "Group the data by regional office and calculate the average deal close value.",
        "ground_truth": "Central: 1,285.06, East: 1,663.40, West: 1,586.77",
        "derivation": "merged_offices_deals = sales_pipeline_df.merge(sales_teams_df, left_on='sales_agent', right_on='sales_agent', how='inner'); average_close_value_by_office = merged_offices_deals.groupby('regional_office')['close_value'].mean().reset_index()",
        "difficulty": "medium",
        "subtype": "Data Aggregation, Grouping, and Classification",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "Here's the average deal close value by regional office:\n- Central Region: $1,285.06\n- East Region: $1,663.40\n- West Region: $1,586.77\n\nThe East region has the highest average deal close value at $1,663.40, followed by the West region at $1,586.77, while the Central region has the lowest average at $1,285.06. This shows a variance of about $378 between the highest and lowest performing regions in terms of average deal value.",
        "score": 1
    },
    {
        "question": "Aggregate sales agents by manager and determine the total revenue they collectively generated from 'Won' deals",
        "ground_truth": "Cara Losch: 1,130,049, Celia Rouche: 1,603,897, Dustin Brinkmann: 1,094,363, Melvin Marxen: 2,251,930, Rocco Neubert: 1,960,545, Summer Sewald: 1,964,750",
        "derivation": "merged_sales_pipeline = sales_pipeline_df.merge(sales_teams_df, on='sales_agent', how='inner'); won_deals_by_manager = merged_sales_pipeline[merged_sales_pipeline['deal_stage'] == 'Won'].groupby('manager')['close_value'].sum().reset_index()",
        "difficulty": "hard",
        "subtype": "Data Aggregation, Grouping, and Classification",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "Here's the total revenue generated by sales agents grouped by their managers:\n- Cara Losch's team: $1,130,049\n- Celia Rouche's team: $1,603,897\n- Dustin Brinkmann's team: $1,094,363\n- Melvin Marxen's team: $2,251,930\n- Rocco Neubert's team: $1,960,545\n- Summer Sewald's team: $1,964,750\n\nMelvin Marxen's team generated the highest revenue from won deals at $2,251,930, while Dustin Brinkmann's team generated the lowest at $1,094,363. All managers' teams have generated over $1 million in revenue from won deals.",
        "score": 1
    },
    {
        "question": "Rank the top 3 products based on the total close value of their deals",
        "ground_truth": "1. GTX Plus Pro: 2,629,651 2. MG Advanced: 2,216,387 3. GTX Plus Basic: 705,275",
        "derivation": "merged_products_deals = sales_pipeline_df.merge(products_df, left_on='product', right_on='product', how='inner'); product_close_values = merged_products_deals.groupby('product')['close_value'].sum().reset_index(); top_3_products = product_close_values.sort_values(by='close_value', ascending=False).head(3)",
        "difficulty": "easy",
        "subtype": "Comparison and Ranking",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The top 3 products ranked by total close value are:\n1. GTXPro: $3,510,578\n2. GTX Plus Pro: $2,629,651\n3. MG Advanced: $2,216,387\n\nThese products have generated the highest total deal values in the opportunities data.",
        "score": 0
    },
    {
        "question": "Compare the total revenue generated by each region and identify the most profitable region.",
        "ground_truth": "Central: 3,346,293, East: 3,090,594, West: 3,568,647",
        "derivation": "region_revenue = merged_offices_deals.groupby('regional_office')['close_value'].sum().reset_index(); most_profitable_region = region_revenue.loc[region_revenue['close_value'].idxmax()]",
        "difficulty": "medium",
        "subtype": "Comparison and Ranking",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The West region was the most profitable with total revenue of $3,568,647, followed by the Central region with $3,346,293, and the East region with $3,090,594. The difference between the highest performing region (West) and lowest performing region (East) is $478,053. The West region outperformed the Central region by $222,354 and the East region by $478,053.\n\nThe ranking from most to least profitable is:\n1. West: $3,568,647\n2. Central: $3,346,293\n3. East: $3,090,594",
        "score": 1
    },
    {
        "question": "Rank top 5 accounts by the number of Won deals they are associated with.",
        "ground_truth": "Kan-code: 115, Hottechi: 111, Konex: 108, Condax: 105, Rangreen: 75.",
        "derivation": "won_deals_by_account = sales_pipeline_df[sales_pipeline_df['deal_stage'] == 'Won'].groupby('account')['opportunity_id'].count().reset_index(); won_deals_by_account.rename(columns={'opportunity_id': 'won_deals_count'}, inplace=True);ranked_accounts = won_deals_by_account.sort_values(by='won_deals_count', ascending=False)",
        "difficulty": "hard",
        "subtype": "Comparison and Ranking",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "Here are the top 5 accounts ranked by number of won deals:\n1. Kan-code: 115 won deals\n2. Hottechi: 111 won deals\n3. Konex: 108 won deals\n4. Condax: 105 won deals\n5. Rangreen: 75 won deals",
        "score": 1
    },
    {
        "question": "Give me a overview of the close rate of each sales person?",
        "ground_truth": "Kan-code: 115, Hottechi: 111, Konex: 108, Condax: 105, Rangreen: 75.",
        "derivation": "won_deals_by_account = sales_pipeline_df[sales_pipeline_df['deal_stage'] == 'Won'].groupby('account')['opportunity_id'].count().reset_index(); won_deals_by_account.rename(columns={'opportunity_id': 'won_deals_count'}, inplace=True);ranked_accounts = won_deals_by_account.sort_values(by='won_deals_count', ascending=False)",
        "difficulty": "easy",
        "subtype": "Summary and Reporting from Tables",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "Here's an overview of the sales team's close rates:\n\nTop Performers (>55% close rate):\n- Reed Clapper leads with an impressive 65.4% close rate (155 wins out of 237 opportunities)\n- Garret Kinder at 61.0% (75/123)\n- Donn Cantrell at 57.5% (158/275)\n\nStrong Performers (50-55% close rate):\n- Hayden Neloms (53.0%)\n- Cecily Lampkin (52.7%)\n- Maureen Marcano (52.3%)\n- James Ascencio (50.6%)\n- Wilburn Farren (50.0%)\n\nAverage Performers (45-50% close rate):\n- Most of the sales team falls in this range\n- Notable mentions include Moses Frase (49.6%), Vicki Laflamme (49.0%), and Darcel Schlecht (46.7% with the highest volume of 747 total opportunities)\n\nLower Performers (<45% close rate):\n- Daniell Hammack (44.0%)\n- Niesha Huffines (43.9%)\n- Marty Freudenburg (43.4%)\n- Gladys Colclough (42.6%)\n- Markita Hansen (42.5%)\n- Lajuana Vencill has the lowest close rate at 40.8%\n\nIt's worth noting that some sales people with lower close rates might be handling higher volumes of opportunities, which could affect their conversion rates. For example, Darcel Schlecht has the highest number of opportunities (747) with a 46.7% close rate, which is still quite respectable given the volume.",
        "score": 0
    },
    {
        "question": "Give me a split of percentage of deals in each stage",
        "ground_truth": "Won: 33.3%, Engaged: 40.2%, Lost: 26.5%",
        "derivation": "deal_stage_split_percentage = sales_pipeline_df['deal_stage'].value_counts(normalize=True) * 100",
        "difficulty": "medium",
        "subtype": "Summary and Reporting from Tables",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "Here's the split of deals by stage:\n- Won: 48.2%\n- Lost: 28.1%\n- Engaging: 18.1%\n- Prospecting: 5.7%\n\nThis shows that nearly half of all deals (48.2%) were won, while about 28% were lost. About 23.8% of deals are still in progress (combined Engaging and Prospecting stages).",
        "score": 0
    },
    {
        "question": "Which combination of product, region, and sales agent maximizes deal win rate",
        "ground_truth": "Won: 33.3%, Engaged: 40.2%, Lost: 26.5%",
        "derivation": "pipeline_full = pd.merge(pd.merge(sales_pipeline,products,on='product'),sales_teams,on='sales_agent); win_rate_data = pipeline_full.groupby(['product','regional_office','sales_agent']).agg(total_deals=('opportunity_id','count'),won_deals=('deal_stage',lambda x:(x=='Won').sum())).reset_index(); win_rate_data['win_rate'] = win_rate_data['won_deals'] / win_rate_data['total_deals']; win_rate_data.loc[win_rate_data['win_rate'].idxmax()]",
        "difficulty": "hard",
        "subtype": "Summary and Reporting from Tables",
        "type": "information retrieval",
        "table_path": "./datasets/business/crm/",
        "result": "The combination that maximizes deal win rate is:\nProduct: MG Special\nRegion: East\nSales Agent: Reed Clapper\nwith a win rate of 78.9% (15 won deals out of 19 total opportunities)\n\nThis combination significantly outperforms other combinations, with the next best being MG Advanced/East/Garret Kinder at 72.7%. The East region appears particularly strong in the top performing combinations, suggesting a regional advantage in closing deals successfully.",
        "score": 0
    }
]